- ansible.builtin.debug:
    msg: "{{ csr }}"
  delegate_to: localhost
- name: Get information on the CSR
  community.crypto.openssl_csr_info:
    content: "{{ csr }}"
  register: decoded_csr
  delegate_to: localhost
- ansible.builtin.debug:
    msg: "{{ decoded_csr }}"
  delegate_to: localhost
- name: Create a challenge
  community.crypto.acme_certificate:
    account_key_content: "{{ acme_key }}"
    account_key_passphrase: "{{ acme_key_passphrase }}"
    csr_content: "{{ csr }}"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    challenge: dns-01
    dest: "/tmp/{{ decoded_csr.subject.commonName }}.crt"
    fullchain_dest: "/tmp/{{ decoded_csr.subject.commonName }}_chain.crt"
  register: challenge
  delegate_to: localhost
- ansible.builtin.debug:
    msg: "{{ challenge }}"
  delegate_to: localhost
- ansible.builtin.include_tasks: "dns_providers/{{ dns_provider }}/create.yml"
- block:
    - ansible.builtin.include_tasks: verify_all_dns_record.yml
      when: verify_dns
    - name: Complete challenge
      community.crypto.acme_certificate:
        account_key_content: "{{ acme_key }}"
        account_key_passphrase: "{{ acme_key_passphrase }}"
        csr_content: "{{ csr }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        challenge: dns-01
        dest: "/tmp/{{ decoded_csr.subject.commonName }}.crt"
        fullchain_dest: "/tmp/{{ decoded_csr.subject.commonName }}_chain.crt"
        data: "{{ challenge }}"
      register: challenge_result
      delegate_to: localhost
    - ansible.builtin.debug:
        msg: "{{ challenge_result }}"
      delegate_to: localhost
    - name: Create a zip file with certificates
      community.general.archive:
        path:
        - "/tmp/{{ decoded_csr.subject.commonName }}.crt"
        - "/tmp/{{ decoded_csr.subject.commonName }}_chain.crt"
        dest: "/tmp/{{ decoded_csr.subject.commonName }}.zip"
        format: zip
      delegate_to: localhost
    - ansible.builtin.include_tasks: certificate_handler.yml
      # vars:
      #   parsed_csr: "{{ decoded_csr }}"
    - name: Delete certificate files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/{{ decoded_csr.subject.commonName }}.crt"
        - "/tmp/{{ decoded_csr.subject.commonName }}_chain.crt"
        - "/tmp/{{ decoded_csr.subject.commonName }}.zip"
      delegate_to: localhost
  always:
    - ansible.builtin.include_tasks: "dns_providers/{{ dns_provider }}/delete.yml"
      when: challenge.challenge_data|length > 0